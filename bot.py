import json
import logging
import asyncio
import signal
import json
import database
import Classes
import dns
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from proxy import get_working_proxies, get_proxies
from browser import Browser
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ChatActions
from database import add_user, get_user, get_durations, get_frequencies, get_base_rate
from geopy.geocoders import Nominatim
from geopy.adapters import AioHTTPAdapter
from dateutil.relativedelta import relativedelta


API_TOKEN = ''
ADMIN_USER_ID = ()
logging.basicConfig(level=logging.INFO)
browser = Browser()
print("–°–æ–∑–¥–∞–Ω –±—Ä–∞—É–∑–µ—Ä")
bot = Bot(token=API_TOKEN, timeout=60)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# proxies = get_working_proxies(10)
proxies = get_proxies()
dp.middleware.setup(LoggingMiddleware())

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class MonitoringSetupStates(StatesGroup):
    city = State()
    product = State()
    price_range = State()
    category = State()
    district = State()
    radius = State()
    coordinate = State()

async def get_address_by_coordinates_async(latitude: float, longitude: float) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}") as response:
            data = await response.text()
            if response.status == 200:
                data_json = json.loads(data)
                if data_json:
                    return data_json.get('display_name')
                else:
                    return None
            else:
                return None

def get_city_coordinates(city_name):
    geolocator = Nominatim(user_agent="myGeocoder")
    location = geolocator.geocode(city_name)
    if location:
        return location.latitude, location.longitude
    else:
        return None

async def send_results(message, items):
    for item in items:
        text = f"<b>{item['title']}</b>\n–¶–µ–Ω–∞: {item['price']}‚ÇΩ\n–°—Å—ã–ª–∫–∞: {item['link']}"
        await message.answer(text, parse_mode=ParseMode.HTML)

def create_menu() -> types.ReplyKeyboardMarkup:
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    btn1 = types.KeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    btn2 = types.KeyboardButton("üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    btn3 = types.KeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã")
    btn4 = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")

    menu.add(btn1, btn2, btn3, btn4)

    return menu

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if await get_user(message.from_user.id) is None:
        user = Classes.User(message.from_user.id, message.from_user.username)
        await add_user(user)
    menu = create_menu()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=menu)

@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å", state="*")
async def help_command(message: types.Message):
    await reset_monitoring_state(message.from_user.id)
    help_text = "–î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫'. –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –¢–≤–µ—Ä—å, iphone SE, 2"
    await message.answer(help_text)

@dp.message_handler(lambda message: message.text == "üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", state="*")
async def show_tariff_plans(message: types.Message):
    await reset_monitoring_state(message.from_user.id)
    subscription = await database.get_subscription_by_user_id(message.from_user.id)
    if subscription and subscription.is_active():
        await show_inf_of_subscription(subscription, message.chat.id)
    else:
        frequencies = await get_frequencies()
        durations = await get_durations()
        base_rate = await get_base_rate()
        keyboard = create_tariff_plans_keyboard(frequencies, durations, base_rate)
        await message.answer("–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π - 3):", reply_markup=keyboard)

async def reset_monitoring_state(user_id):
    current_state = dp.current_state(user=user_id)
    state_name = await current_state.get_state()
    if state_name is not None and state_name.startswith("MonitoringSetupStates:"):
        await current_state.reset_state()

@dp.message_handler(lambda message: message.text == "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", state="*")
async def new_monitoring(message: types.Message, state: FSMContext):
    subscription = await database.get_subscription_by_user_id(message.from_user.id)
    if subscription and subscription.is_active():
        await reset_monitoring_state(message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –ê–≤–∏—Ç–æ. "
                             "–°–Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã. üåá")
        await state.update_data(coordinates=None)
        await state.update_data(district=None)
        await state.update_data(radius=None)
        await MonitoringSetupStates.city.set()
    else:
        if subscription:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await show_inf_of_subscription(subscription, message.chat.id)
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!\n –û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ "
                              "—É—Å–ª–æ–≤–∏—è–º–∏ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã'.")



async def show_inf_of_subscription(subscription, chat_id):
    start_date = datetime.strptime(subscription.start_date, "%Y-%m-%d %H:%M:%S.%f")
    end_date = datetime.strptime(subscription.end_date, "%Y-%m-%d %H:%M:%S.%f")
    title = "–°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫" if not subscription.is_active() else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
    await bot.send_message(
        chat_id=chat_id,
        text=f"{title}:\n\n"
             f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%H:%M %d.%m.%Y')}\n"
             f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%H:%M %d.%m.%Y')}\n"
             f"–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {subscription.frequency.name}\n"
             f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {subscription.duration.name}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(lambda message: message.text != "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", state=MonitoringSetupStates.city)
async def process_city(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(city=message.text)

    # keyboard = types.InlineKeyboardMarkup()
    # keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–π–æ–Ω—ã", callback_data="load_districts"))
    # keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_districts"))
    #
    # await bot.send_message(
    #     chat_id=message.chat.id,
    #     text="–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–¥–µ—Ç—Å—è –ø–æ –≤—Å–µ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É):",
    #     reply_markup=keyboard,
    # )
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Ç—ã –∏—â–µ—à—å? üõç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

@dp.message_handler(lambda message: message.text != "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", state=MonitoringSetupStates.product)
async def process_product(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(product=message.text.strip())

    # keyboard = types.InlineKeyboardMarkup()
    # keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="load_categories"))
    # keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_categories"))
    #
    # await bot.send_message(
    #     chat_id=message.chat.id,
    #     text="–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–¥–µ—Ç—Å—è –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):",
    #     reply_markup=keyboard,
    # )
    await message.answer("–°—É–ø–µ—Ä! üí° –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º. "
                         "–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '1000-5000'. üí∏")
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
@dp.message_handler(lambda message: message.text != "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", state=MonitoringSetupStates.price_range)
async def process_price_range(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    if '-' in message.text:
        min_price, max_price = message.text.split('-')
        if min_price.isdigit() and max_price.isdigit():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
            await state.update_data(min_price=int(min_price), max_price=int(max_price))
            sent_message = await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ...")
            asyncio.create_task(send_long_chat_action(message.chat.id, ChatActions.TYPING, 12))
            user_data = await state.get_data()
            city = dns.city_transliteration(user_data.get('city'))
            url = f"https://www.avito.ru/{city}?q={user_data.get('product').replace(' ', '+')}"
            print(url)
            await bot.edit_message_text(chat_id=message.chat.id, message_id=sent_message.message_id, text=""
                                        "–°–µ–∫—É–Ω–¥—É, —Å–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ...")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            asyncio.create_task(send_long_chat_action(message.chat.id, ChatActions.TYPING, 12))
            try:
                url, categories, districts, radius = await dns.get_data_and_url(browser, url,
                                                                            user_data.get('min_price'),
                                                                            user_data.get('max_price'))
                await state.update_data(categories=categories)
                await state.update_data(districts=districts)
                await state.update_data(radius=radius)
                await state.update_data(url=url)
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="load_categories"))
                keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_categories"))
                await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ "
                         "–≤–µ–¥–µ—Ç—Å—è –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):",
                    reply_markup=keyboard,
                )
                await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            except Exception as e:
                if url:
                    await state.update_data(url=url)
                    text = f"–£–ø—Å! üòÖ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"\
                           "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –¥–µ–ª–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. ü§î "\
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: "\
                           f"{url}\n\n"\
                           "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ! üîÑ –í–≤–µ–¥–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–≤–æ–µ–º—É –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É –æ–±–ª–∞—Å—Ç–Ω–æ–π –∏–ª–∏ —Ä–∞–π–æ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. "\
                           "–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –ø–æ–∑–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞. üìç\n\n"\
                           "–ù–∞–∂–º–∏ 'üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Å–æ–æ–±—â–∏ –æ–± –æ—à–∏–±–∫–µ. üôè"
                    sent_message = await message.answer(text=text)
                    sent_message_id = sent_message.message_id
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
                                                            callback_data=f"send_error_report:{sent_message_id}"))

                    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=sent_message_id,
                                                        reply_markup=keyboard)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω-–º–∞–∫—Å', –Ω–∞–ø—Ä–∏–º–µ—Ä, '100-500'.")

@dp.callback_query_handler(lambda call: call.data.startswith('send_error_report'), state=MonitoringSetupStates.price_range)
async def process_radius_none(call: types.CallbackQuery, state: FSMContext):
    _, message_id = call.data.split(":")
    user_data = await state.get_data()
    user = await database.get_user(call.from_user.id)
    start_date = datetime.strptime(user.subscription.start_date, "%Y-%m-%d %H:%M:%S.%f")
    end_date = datetime.strptime(user.subscription.end_date, "%Y-%m-%d %H:%M:%S.%f")
    await bot.delete_message(call.message.chat.id, message_id)
    await bot.send_message(958742622, text=f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_name}\n"
                                           f"–ü–æ–ø—ã—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {user_data.get('url')}\n"
                                           f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã!\n\n"
                                           f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:\n"
                                           f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%H:%M %d.%m.%Y')}\n"
                                           f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%H:%M %d.%m.%Y')}\n"
                                           f"–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {user.subscription.frequency.name}\n"
                                           f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user.subscription.duration.name}"
                           )
    await call.message.answer(f"–ü–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ. –û–±–µ—â–∞–µ–º –ø–æ—á–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏. üë®‚Äçüîß\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@dp.callback_query_handler(lambda call: call.data.startswith('district_'), state=MonitoringSetupStates.district)
async def process_district(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    districts = user_data.get('districts')
    district = [item for item in districts if item['title'] == call.data.split("_")[1]]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(district=district[0])

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å", callback_data="load_radius"))
    # keyboard.add(types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="set_coordinates"))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_radius"))

    await bot.send_message(
        chat_id=call.message.chat.id,
        text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ üó∫Ô∏è,\n"
             "–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∫—Ä–∞—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.üîé",
        reply_markup=keyboard,
    )
    await call.answer("–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω")
    # await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

# @dp.callback_query_handler(lambda c: c.data.startswith('set_coordinates'), state=MonitoringSetupStates.district)
# async def load_radius_callback(callback_query: types.CallbackQuery, state: FSMContext):
#     user_data = await state.get_data()
#     await bot.send_message(chat_id=callback_query.message.chat.id, text="–£–∫–∞–∂–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏ —Å—É–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ä–∞—Å–ø–æ–ª–æ–≥–∞–µ—Ç—Å—è üè°:")
#     await MonitoringSetupStates.coordinate.set()


# @dp.message_handler(lambda message: message.text != "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", state=MonitoringSetupStates.coordinate)
# async def process_city(message: types.Message, state: FSMContext):
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
#     await state.update_data(city_from_coordinate=message.text)
#     coordinates = get_city_coordinates(message.text)
#     await state.update_data(coordinates=coordinates)
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="load_categories"))
#     keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_categories"))
#     await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Ç—ã –∏—â–µ—à—å? üõç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
#     await bot.send_location(message.chat.id, coordinates[0], coordinates[1])
#     await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

@dp.message_handler(content_types=types.ContentType.LOCATION, state=MonitoringSetupStates.coordinate)
async def process_coordinates(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coordinates = (message.location.latitude, message.location.longitude)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(coordinates=coordinates)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await display_user_data_message(message, state)
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()

async def display_user_data_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    city = user_data.get('city', None)
    product_name = user_data.get('product', None)
    category_name = user_data.get('category', {}).get('title', None) if user_data.get('category') is not None else None
    category_link = user_data.get('category', {}).get('link', None) if user_data.get('category') is not None else None
    url = user_data.get('url', None)
    min_price = user_data.get('min_price', None)
    max_price = user_data.get('max_price', None)
    coordinates = user_data.get('coordinates', None)
    district = user_data.get('district', {}).get('number', None) if user_data.get('district') is not None else None
    radius = user_data.get('radius', {}).get('title', None) if user_data.get('radius') is not None else None
    subscription = await database.get_subscription_by_user_id(message.from_user.id)
    user = Classes.User(message.from_user.id, message.from_user.username, subscription)
    if coordinates:
        address = await get_address_by_coordinates_async(coordinates[0], coordinates[1])
    else:
        coordinates = get_city_coordinates(city)
        address = city
    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
    f = dns.get_url_param_value(url, 'f')
    url_new = dns.add_parameters_to_url(category_link, f, district, radius, coordinates)
    await database.add_monitoring(user, user.subscription.frequency, city, product_name, url_new, datetime.now(),
                                  min_price, max_price)
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–í–æ—Ç –∏ –≤—Å—ë! üëè –¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –ê–≤–∏—Ç–æ –≥–æ—Ç–æ–≤—ã! –í–æ—Ç —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏:\n\n"
                              f"–õ–æ–∫–∞—Ü–∏—è: {address if address is not None else city}\n"
                              f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞ {coordinates[0]}, –¥–æ–ª–≥–æ—Ç–∞ {coordinates[1]}\n"
                              f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}\n"
                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                              f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_price}-{max_price}\n"
                              f"–°—Å—ã–ª–∫–∞: {url_new}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
@dp.callback_query_handler(lambda call: call.data.startswith('radius_'), state=MonitoringSetupStates.radius)
async def process_district(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    radiuses = user_data.get('radius')
    radius = [item for item in radiuses if str(item['title']) == call.data.split("_")[1]]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(radius=radius[0])
    await  bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å "
                                                       "–ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. üìç"
                                                       "–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π "
                                                       "(–∏–∫–æ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–µ —Å–∫—Ä–µ–ø–∫–∏)üìé –∏ –≤—ã–±–µ—Ä–∏ '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'.")
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await call.answer("–†–∞–¥–∏—É—Å –≤—ã–±—Ä–∞–Ω")



@dp.callback_query_handler(lambda c: c.data.startswith('load_radius'), state=MonitoringSetupStates.radius)
async def load_radius_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    user_data = await state.get_data()
    keyboard = create_inline_keyboard(user_data["radius"], 'radius', page=0)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–ï—â—ë —á—É—Ç—å-—á—É—Ç—å! üéØ –í—ã–±–µ—Ä–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∫–º, 3 –∫–º, 5 –∫–º, –∏ —Ç.–¥.):",
        reply_markup=keyboard,
    )
    # await MonitoringSetupStates.next()


@dp.callback_query_handler(lambda call: call.data.startswith('skip_radius'), state=MonitoringSetupStates.radius)
async def process_radius_none(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data(coordinates=None)
    await state.update_data(radius=None)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await display_user_data(call, state)
    await call.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('load_districts'), state=MonitoringSetupStates.district)
async def load_districts_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    user_data = await state.get_data()
    districts = user_data.get('districts', [])
    if not districts:
        await process_district_none(callback_query, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return
    # city = dns.city_transliteration(user_data.get('city'))
    # url = f"https://www.avito.ru/{city}?q={user_data.get('product').replace(' ', '+')}"
    # print(url)
    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # chat_id = callback_query.message.chat.id
    # asyncio.create_task(send_long_chat_action(chat_id, ChatActions.TYPING, 12))  # –ó–∞–¥–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    # url, _, districts, radius = await dns.get_data_and_url(browser, city, user_data.get('product'),
    #                                                        user_data.get('min_price'), user_data.get('max_price'))
    # await state.update_data(districts=districts)
    # await state.update_data(radius=radius)
    # await state.update_data(url=url)
    # # keyboard = create_inline_keyboard(categories)
    keyboard = create_inline_keyboard(user_data.get('districts'), 'district', page=0)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üëç –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ä–∞–π–æ–Ω–æ–º. –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ:",
        reply_markup=keyboard,
    )

@dp.callback_query_handler(lambda call: call.data.startswith('skip_districts'), state=MonitoringSetupStates.district)
async def process_district_none(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(district=None)
    await call.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ä–∞–π–æ–Ω–∞–º")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å", callback_data="load_radius"))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_radius"))

    await bot.send_message(
        chat_id=call.message.chat.id,
        text="–£–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
        reply_markup=keyboard,
    )
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    # await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

async def send_long_chat_action(chat_id, action, duration):
    while duration > 0:
        await bot.send_chat_action(chat_id, action)
        await asyncio.sleep(4)  # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π —á–∞—Ç–∞
        duration -= 4

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å InlineKeyboard
@dp.callback_query_handler(lambda c: c.data.startswith('load_categories'), state=MonitoringSetupStates.category)
async def load_categories_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    user_data = await state.get_data()
    keyboard = create_inline_keyboard(user_data.get('categories'), 'category', page=0)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üòä –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )

@dp.callback_query_handler(lambda call: call.data.startswith('skip_categories'), state=MonitoringSetupStates.category)
async def process_category_none(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    url = f"https://www.avito.ru/{'all'}?q={user_data.get('product').replace(' ', '+')}"
    await state.update_data(category={'title': "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 'link': url})

    await call.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–π–æ–Ω—ã", callback_data="load_districts"))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_districts"))

    await bot.send_message(
        chat_id=call.message.chat.id,
        text="–£–∫–∞–∂–∏ —Ä–∞–π–æ–Ω, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ "
             "(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–¥–µ—Ç—Å—è –ø–æ –≤—Å–µ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É):",
        reply_markup=keyboard,
    )
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@dp.callback_query_handler(lambda c: c.data.startswith('next_page_') or c.data.startswith('prev_page_'), state=MonitoringSetupStates.category)
async def paginate_categories_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[-1])
    user_data = await state.get_data()
    categories = user_data.get('categories')
    keyboard = create_inline_keyboard(categories, 'category', page=page)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard,
    )

@dp.callback_query_handler(lambda c: c.data.startswith('next_page_') or c.data.startswith('prev_page_'), state=MonitoringSetupStates.district)
async def paginate_districts_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[-1])
    user_data = await state.get_data()
    categories = user_data.get('districts')
    keyboard = create_inline_keyboard(categories, 'district', page=page)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=keyboard,
    )

def truncate_category(category: str, max_bytes: int = 64) -> str:
    encoded_category = category.encode('utf-8')
    if len(encoded_category) <= max_bytes:
        return category

    truncated = encoded_category[:max_bytes].decode('utf-8', 'ignore')
    return truncated.rstrip()

def truncate_callback_data(data: str, max_length: int = 64) -> str:
    encoded_data = data.encode('utf-8')
    if len(encoded_data) > max_length:
        truncated_data = encoded_data[:max_length - 1 - 2].decode('utf-8', 'ignore').strip()
        data = truncated_data + "‚Ä¶"
    return data

def create_inline_keyboard(items: list, name: str, page: int = 0) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    start_index = page * 15
    end_index = start_index + 15

    for item in items[start_index:end_index]:
        if isinstance(item['title'], int):
            button = InlineKeyboardButton(text=str(item['title']), callback_data=f"{name}_{item['title']}")
        else:
            button = InlineKeyboardButton(text=truncate_category(item['title']),
                                          callback_data=truncate_callback_data(f"{name}_{item['title']}"))
        keyboard.add(button)

    # –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ "–¥–∞–ª–µ–µ" –∏ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    navigation_buttons = []
    total_pages = (len(items) + 14) // 15

    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prev_page_{page - 1}"))

    if 0 < page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="i"))

    if end_index < len(items):
        navigation_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"next_page_{page + 1}"))

    keyboard.row(*navigation_buttons)
    return keyboard

@dp.callback_query_handler(lambda c: c.data == 'i', state="*")
async def ignore_callback_query(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda call: call.data.startswith('category_'), state=MonitoringSetupStates.category)
async def process_category(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    categories = user_data.get('categories')
    category = [item for item in categories if item['title'] == call.data.split("_")[1]]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(category=category[0])

    await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–π–æ–Ω—ã", callback_data="load_districts"))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_districts"))

    await bot.send_message(
        chat_id=call.message.chat.id,
        text="–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–¥–µ—Ç—Å—è –ø–æ –≤—Å–µ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É):",
        reply_markup=keyboard,
    )
    await MonitoringSetupStates.next()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

async def display_user_data(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    city = user_data.get('city', None)
    product_name = user_data.get('product', None)
    category_name = user_data.get('category', {}).get('title', None) if user_data.get('category') is not None else None
    category_link = user_data.get('category', {}).get('link', None) if user_data.get('category') is not None else None
    url = user_data.get('url', None)
    min_price = user_data.get('min_price', None)
    max_price = user_data.get('max_price', None)
    coordinates = user_data.get('coordinates', None)
    district = user_data.get('district', {}).get('number', None) if user_data.get('district') is not None else None
    radius = user_data.get('radius', {}).get('title', None) if user_data.get('radius') is not None else None
    subscription = await database.get_subscription_by_user_id(call.from_user.id)
    user = Classes.User(call.from_user.id, call.from_user.username, subscription)
    if coordinates:
        address = await get_address_by_coordinates_async(coordinates[0], coordinates[1])
    else:
        coordinates = get_city_coordinates(city)
        address = city
    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
    f = dns.get_url_param_value(url, 'f')
    url_new = dns.add_parameters_to_url(category_link, f, district, radius, coordinates)
    await database.add_monitoring(user, user.subscription.frequency, city, product_name, url_new, datetime.now(),
                                  min_price, max_price)
    await call.message.answer(f"–í–æ—Ç –∏ –≤—Å—ë! üëè –¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –ê–≤–∏—Ç–æ –≥–æ—Ç–æ–≤—ã! –í–æ—Ç —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏:\n\n"
                              f"–õ–æ–∫–∞—Ü–∏—è: {address if address is not None else city}\n"
                              f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞ {coordinates[0]}, –¥–æ–ª–≥–æ—Ç–∞ {coordinates[1]}\n"
                              f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}\n"
                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                              f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_price}-{max_price}\n"
                              f"–°—Å—ã–ª–∫–∞: {url_new}")


def subscription_cost(frequency, duration, base_rate):

    if frequency.koef is None or duration.koef is None:
        raise ValueError("Invalid frequency or duration")

    cost = float(base_rate) * frequency.koef * duration.koef
    return int(cost)

def create_tariff_plans_keyboard(frequencies, durations, base_rate):
    keyboard = InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header = [InlineKeyboardButton("–ß–∞—Å—Ç–æ—Ç–∞", callback_data="ignore")]
    for duration in durations:
        header.append(InlineKeyboardButton(duration.name, callback_data="ignore"))
    keyboard.row(*header)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    for frequency in frequencies:
        row = [InlineKeyboardButton(frequency.name, callback_data="ignore")]
        for duration in durations:
            cost = subscription_cost(frequency, duration, base_rate)
            row.append(InlineKeyboardButton(str(cost), callback_data="choose_plan:{}:{}".format(frequency.frequency_id,
                                                                                                duration.duration_id)))
        keyboard.row(*row)

    return keyboard

@dp.callback_query_handler(lambda c: c.data.startswith('choose_plan') or c.data == "ignore")
async def choose_plan_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "ignore":
        await bot.answer_callback_query(callback_query.id, text="")
    else:
        subscription = await database.get_subscription_by_user_id(callback_query.from_user.id)
        if subscription:
            await database.delete_subscription(subscription.subscription_id)
        _, frequency_id, duration_id = callback_query.data.split(':')
        frequency = await database.get_frequency(frequency_id)
        duration = await database.get_duration(duration_id)
        if pay_function_test:
            start_date = datetime.now()
            await database.add_subscription(start_date, start_date+timedelta(days=duration.value_in_day),
                                            frequency, duration, callback_query.from_user.id)
        await bot.answer_callback_query(callback_query.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ —Å —á–∞—Å—Ç–æ—Ç–æ–π {} –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é "
                                                                "{}.".format(frequency.name, duration.name))

async def pay_function_test(user_id):
    return user_id in ADMIN_USER_ID

async def close_browser():
    await browser.close()

async def on_shutdown(dp):
    print("–ó–∞–∫—Ä—ã–ª–∏ –±—Ä–∞—É–∑–µ—Ä")
    await close_browser()

@dp.message_handler(lambda message: message.text == "/stop_script" and message.from_user.id in ADMIN_USER_ID)
async def stop_script(message: types.Message):
    await message.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∫—Ä–∏–ø—Ç...")
    dp.stop_polling()
    await on_shutdown(dp)

if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=on_shutdown)
